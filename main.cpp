#include <iostream>

#include "conver_lvglfont.h"

// TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.

unsigned char font[][101] = {
	/* U+0030 "0" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x0, 0x1, 0xff, 0x80, 0x0, 0x7f, 0xe0,
    0x0, 0x1f, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1,
    0xff, 0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8,
    0x0, 0x7, 0xfe, 0x0, 0x1, 0xff, 0x80, 0x0,
    0x7f, 0xe0, 0x0, 0x1f, 0xf8, 0x0, 0x7, 0xfe,
    0x0, 0x1, 0xff, 0x80, 0x0, 0x7f, 0xe0, 0x0,
    0x1f, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1, 0xff,
    0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8, 0x0,
    0x7, 0xfe, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,

    /* U+0031 "1" */
    0x0, 0x1f, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x1,
    0xf0, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x1f, 0x0,
    0x3f, 0xff, 0xc0, 0xf, 0xff, 0xf0, 0x3, 0xff,
    0xfc, 0x0, 0xff, 0xff, 0x0, 0x3f, 0xff, 0xc0,
    0x0, 0x1, 0xf0, 0x0, 0x0, 0x7c, 0x0, 0x0,
    0x1f, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x1, 0xf0,
    0x0, 0x0, 0x7c, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x7, 0xc0, 0x0, 0x1, 0xf0, 0x0, 0x0, 0x7c,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x7, 0xc0, 0x0,
    0x1, 0xf0, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x1f,
    0x0, 0x0, 0x7, 0xc0, 0xf, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,

    /* U+0032 "2" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xc0, 0x0, 0x1, 0xf0, 0x0, 0x0, 0x7c, 0x0,
    0x0, 0x1f, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x1,
    0xf0, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x1f, 0x0,
    0x0, 0x7, 0xc0, 0x0, 0x1, 0xf0, 0x0, 0x0,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf8, 0x0, 0x0, 0x3e, 0x0, 0x0, 0xf,
    0x80, 0x0, 0x3, 0xe0, 0x0, 0x0, 0xf8, 0x0,
    0x0, 0x3e, 0x0, 0x0, 0xf, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,

    /* U+0033 "3" */
    0xff, 0xff, 0xf8, 0x3f, 0xff, 0xfe, 0xf, 0xff,
    0xff, 0x83, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xf8,
    0x0, 0x0, 0x3e, 0x0, 0x0, 0xf, 0x80, 0x0,
    0x3, 0xe0, 0x0, 0x0, 0xf8, 0x0, 0x0, 0x3e,
    0x0, 0x3, 0xff, 0xfc, 0x0, 0xff, 0xff, 0x0,
    0x3f, 0xff, 0xc0, 0xf, 0xff, 0xf0, 0x3, 0xff,
    0xfc, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x7, 0xc0,
    0x0, 0x1, 0xf0, 0x0, 0x0, 0x7c, 0x0, 0x0,
    0x1f, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1, 0xff,
    0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8, 0x0,
    0x7, 0xfe, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,

    /* U+0034 "4" */
    0xf8, 0x0, 0x0, 0x3e, 0x0, 0x0, 0xf, 0x80,
    0x0, 0x3, 0xe0, 0x0, 0x0, 0xf8, 0x0, 0x0,
    0x3e, 0x0, 0x0, 0xf, 0x80, 0x0, 0x3, 0xe0,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0x3e, 0x0, 0x0,
    0xf, 0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8,
    0x0, 0x7, 0xfe, 0x0, 0x1, 0xff, 0x80, 0x0,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x1, 0xf0,
    0x0, 0x0, 0x7c, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x7, 0xc0, 0x0, 0x1, 0xf0, 0x0, 0x0, 0x7c,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x7, 0xc0, 0x0,
    0x1, 0xf0, 0x0, 0x0, 0x7c,

    /* U+0035 "5" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x0, 0x0, 0xf, 0x80, 0x0, 0x3, 0xe0,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0x3e, 0x0, 0x0,
    0xf, 0x80, 0x0, 0x3, 0xe0, 0x0, 0x0, 0xf8,
    0x0, 0x0, 0x3e, 0x0, 0x0, 0xf, 0x80, 0x0,
    0x3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x1, 0xf0,
    0x0, 0x0, 0x7c, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x7, 0xc0, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,

    /* U+0036 "6" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x0, 0x0, 0xf, 0x80, 0x0, 0x3, 0xe0,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0x3e, 0x0, 0x0,
    0xf, 0x80, 0x0, 0x3, 0xe0, 0x0, 0x0, 0xf8,
    0x0, 0x0, 0x3e, 0x0, 0x0, 0xf, 0x80, 0x0,
    0x3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1, 0xff,
    0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8, 0x0,
    0x7, 0xfe, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,

    /* U+0037 "7" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x0, 0x1, 0xff, 0x80, 0x0, 0x7f, 0xe0,
    0x0, 0x1f, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1,
    0xff, 0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8,
    0x0, 0x7, 0xfe, 0x0, 0x1, 0xff, 0x80, 0x0,
    0x7f, 0xe0, 0x0, 0x1f, 0x0, 0x0, 0x7, 0xc0,
    0x0, 0x1, 0xf0, 0x0, 0x0, 0x7c, 0x0, 0x0,
    0x1f, 0x0, 0x0, 0x7, 0xc0, 0xf, 0xff, 0xf0,
    0x3, 0xff, 0xfc, 0x0, 0xff, 0xff, 0x0, 0x3f,
    0xff, 0xc0, 0xf, 0xff, 0xf0, 0x0, 0x0, 0x7c,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x7, 0xc0, 0x0,
    0x1, 0xf0, 0x0, 0x0, 0x7c,

    /* U+0038 "8" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x0, 0x1, 0xff, 0x80, 0x0, 0x7f, 0xe0,
    0x0, 0x1f, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1,
    0xff, 0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8,
    0x0, 0x7, 0xfe, 0x0, 0x1, 0xff, 0x80, 0x0,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1, 0xff,
    0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8, 0x0,
    0x7, 0xfe, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,

    /* U+0039 "9" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x0, 0x1, 0xff, 0x80, 0x0, 0x7f, 0xe0,
    0x0, 0x1f, 0xf8, 0x0, 0x7, 0xfe, 0x0, 0x1,
    0xff, 0x80, 0x0, 0x7f, 0xe0, 0x0, 0x1f, 0xf8,
    0x0, 0x7, 0xfe, 0x0, 0x1, 0xff, 0x80, 0x0,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x1, 0xf0,
    0x0, 0x0, 0x7c, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x7, 0xc0, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc,
};


unsigned char reverseBits(unsigned char byte) {
    unsigned char result = 0;
    for (int i = 0; i < 8; i++) {
        result <<= 1;               // 左移结果
        result |= (byte & 1);       // 取出最低位并加入结果
        byte >>= 1;                 // 右移原始字节
    }
    return result;
}

void displayFont(unsigned char font[][101], int charIndex, int width, int height) {
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            int byteIndex = (i * width + j) / 8; // 当前字节索引
            int bitIndex = 7 - (j % 8);         // 当前位索引（高位优先）
            if (reverseBits(font[charIndex][byteIndex]) & (1 << bitIndex)) {
                std::cout << "___"; // 绘制像素
            } else {
                std::cout << "###"; // 空白
            }
        }
        std::cout << "\n"; // 换行
    }
}

unsigned char draw[128][128] = {0}; // 40*40的画布
unsigned char draw_[128][128] = {0}; // 40*40的画布

unsigned char font2[][87] = {
    /* U+0030 "0" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0,
    0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0,
    0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+0031 "1" */
    0x0, 0x7c, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x7c,
    0x0, 0x0, 0x7c, 0x0, 0x0, 0x7c, 0x0, 0xff,
    0xfc, 0x0, 0xff, 0xfc, 0x0, 0xff, 0xfc, 0x0,
    0xff, 0xfc, 0x0, 0xff, 0xfc, 0x0, 0x0, 0x7c,
    0x0, 0x0, 0x7c, 0x0, 0x0, 0x7c, 0x0, 0x0,
    0x7c, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x7c, 0x0,
    0x0, 0x7c, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x7c,
    0x0, 0x0, 0x7c, 0x0, 0x0, 0x7c, 0x0, 0x0,
    0x7c, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x7c, 0x0,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+0032 "2" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0,
    0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0,
    0x0, 0x1f, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x0, 0xf8,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+0033 "3" */
    0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff,
    0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x0,
    0x3, 0xe0, 0x0, 0x3, 0xe0, 0x0, 0x3, 0xe0,
    0x0, 0x3, 0xe0, 0x0, 0x3, 0xe0, 0x0, 0x7f,
    0xff, 0x0, 0x7f, 0xff, 0x0, 0x7f, 0xff, 0x0,
    0x7f, 0xff, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x1f,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+0034 "4" */
    0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0,
    0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0,
    0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0,
    0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x1f, 0x0,
    0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f,

    /* U+0035 "5" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0,
    0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0,
    0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x1f, 0x0,
    0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+0036 "6" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0,
    0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0,
    0x0, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf8,
    0x0, 0x0, 0xf8, 0x0, 0x0, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+0037 "7" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0,
    0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x1f, 0x0, 0x3f, 0xff, 0x0, 0x3f, 0xff, 0x0,
    0x3f, 0xff, 0x0, 0x3f, 0xff, 0x0, 0x3f, 0xff,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0,
    0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f,

    /* U+0038 "8" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0,
    0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+0039 "9" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f,
    0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0,
    0x1f, 0xf8, 0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xf8,
    0x0, 0x1f, 0xf8, 0x0, 0x1f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x1f, 0x0,
    0x0, 0x1f, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    /* U+003A ":" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

unsigned char helloworld[][141] {

    /* U+4E16 "世" */
    0x0, 0x3, 0x81, 0xc0, 0x0, 0x0, 0xe0, 0x70,
    0x0, 0x70, 0x38, 0x1c, 0x0, 0x1c, 0xe, 0x7,
    0x0, 0x7, 0x3, 0x81, 0xc0, 0x1, 0xc0, 0xe0,
    0x70, 0x0, 0x70, 0x38, 0x1c, 0x0, 0x1c, 0xe,
    0x7, 0x0, 0x7, 0x3, 0x81, 0xc0, 0x1, 0xc0,
    0xe0, 0x70, 0x0, 0x70, 0x38, 0x1c, 0x3, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xf0, 0x70, 0x38, 0x1c, 0x0,
    0x1c, 0xe, 0x7, 0x0, 0x7, 0x3, 0x81, 0xc0,
    0x1, 0xc0, 0xe0, 0x70, 0x0, 0x70, 0x38, 0x1c,
    0x0, 0x1c, 0xe, 0x7, 0x0, 0x7, 0x3, 0x81,
    0xc0, 0x1, 0xc0, 0xe0, 0x70, 0x0, 0x70, 0x38,
    0x1c, 0x0, 0x1c, 0xf, 0xff, 0x0, 0x7, 0x3,
    0xff, 0xc0, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x70,
    0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x7,
    0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x0, 0x0,
    0x7f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xfc,
    0x7, 0xff, 0xff, 0xff, 0x0,

    /* U+4F60 "你" */
    0x0, 0xc0, 0x40, 0x0, 0x0, 0x1c, 0xf, 0x0,
    0x0, 0x7, 0x81, 0xc0, 0x0, 0x0, 0xe0, 0x78,
    0x0, 0x0, 0x3c, 0xe, 0x0, 0x0, 0x7, 0x3,
    0xc0, 0x0, 0x1, 0xc0, 0x7f, 0xff, 0xf0, 0x38,
    0x1f, 0xff, 0xfe, 0xf, 0x3, 0x80, 0x3, 0x81,
    0xe0, 0xf0, 0x0, 0x70, 0x7c, 0x1c, 0x0, 0x1c,
    0x1f, 0x87, 0x3, 0x83, 0x87, 0xf1, 0xe0, 0x70,
    0xf1, 0xee, 0x78, 0xe, 0x0, 0x19, 0xc3, 0x1,
    0xc0, 0x1, 0x38, 0x0, 0x38, 0x0, 0x7, 0x0,
    0x7, 0x0, 0x0, 0xe0, 0x10, 0xe3, 0x0, 0x1c,
    0x7, 0x9c, 0x70, 0x3, 0x80, 0xe3, 0x8f, 0x0,
    0x70, 0x3c, 0x70, 0xe0, 0xe, 0x7, 0xe, 0xe,
    0x1, 0xc1, 0xc1, 0xc1, 0xe0, 0x38, 0x78, 0x38,
    0x1c, 0x7, 0x1e, 0x7, 0x3, 0xc0, 0xe7, 0x80,
    0xe0, 0x3c, 0x1c, 0xf0, 0x1c, 0x7, 0x3, 0x84,
    0x3, 0x80, 0x40, 0x70, 0x0, 0x70, 0x0, 0xe,
    0x0, 0xe, 0x0, 0x1, 0xc0, 0x3, 0xc0, 0x0,
    0x38, 0x3, 0xf8, 0x0, 0x7, 0x0, 0x7e, 0x0,
    0x0, 0xe0, 0xf, 0x0, 0x0,

    /* U+597D "好" */
    0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0,
    0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x0,
    0x0, 0x0, 0x1c, 0x7, 0xff, 0xfc, 0x3, 0x80,
    0xff, 0xff, 0x80, 0x60, 0x0, 0x1, 0xf0, 0x1c,
    0x0, 0x0, 0x78, 0x3, 0x80, 0x0, 0x1e, 0xf,
    0xff, 0xe0, 0x7, 0x81, 0xff, 0xfc, 0x1, 0xe0,
    0x3, 0x83, 0x80, 0x78, 0x0, 0x70, 0x70, 0xe,
    0x0, 0xe, 0x1c, 0x1, 0xc0, 0x1, 0x83, 0x80,
    0x38, 0x0, 0x70, 0x70, 0x7, 0x0, 0xe, 0xe,
    0x0, 0xe0, 0x1, 0x83, 0x9f, 0xff, 0xfc, 0x70,
    0x73, 0xff, 0xff, 0x8e, 0xe, 0x0, 0x70, 0x1,
    0xe3, 0x80, 0xe, 0x0, 0x1f, 0x70, 0x1, 0xc0,
    0x0, 0xfc, 0x0, 0x38, 0x0, 0xf, 0x80, 0x7,
    0x0, 0x0, 0xf8, 0x0, 0xe0, 0x0, 0x3f, 0x80,
    0x1c, 0x0, 0xf, 0x78, 0x3, 0x80, 0x1, 0xc7,
    0x80, 0x70, 0x0, 0xf0, 0x78, 0xe, 0x0, 0x3c,
    0x6, 0x1, 0xc0, 0xf, 0x0, 0x80, 0x78, 0x7,
    0xc0, 0x0, 0x7f, 0x0, 0x70, 0x0, 0xf, 0xc0,
    0x4, 0x0, 0x1, 0xe0, 0x0,

    /* U+754C "界" */
    0xf, 0xff, 0xff, 0xfc, 0x1, 0xff, 0xff, 0xff,
    0x80, 0x38, 0x7, 0x0, 0x70, 0x7, 0x0, 0xe0,
    0xe, 0x0, 0xe0, 0x1c, 0x1, 0xc0, 0x1f, 0xff,
    0xff, 0xf8, 0x3, 0xff, 0xff, 0xff, 0x0, 0x70,
    0xe, 0x0, 0xe0, 0xe, 0x1, 0xc0, 0x1c, 0x1,
    0xc0, 0x38, 0x3, 0x80, 0x38, 0x7, 0x0, 0x70,
    0x7, 0xff, 0xff, 0xfe, 0x0, 0xff, 0xff, 0xff,
    0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70,
    0x0, 0x0, 0x0, 0x1e, 0x0, 0x0, 0x0, 0x7,
    0xe0, 0x0, 0x0, 0x3, 0xff, 0x0, 0x0, 0x0,
    0xf0, 0xf8, 0x0, 0x0, 0x7c, 0xf, 0xc0, 0x0,
    0x7e, 0x0, 0x7f, 0x0, 0x7f, 0x0, 0x7, 0xfc,
    0x3f, 0x9c, 0x0, 0xff, 0xf3, 0xc3, 0x80, 0x1c,
    0xfc, 0x0, 0x70, 0x3, 0x83, 0x80, 0xe, 0x0,
    0x70, 0x0, 0x1, 0xc0, 0xe, 0x0, 0x0, 0x78,
    0x1, 0xc0, 0x0, 0xe, 0x0, 0x38, 0x0, 0x3,
    0xc0, 0x7, 0x0, 0x0, 0xf0, 0x0, 0xe0, 0x0,
    0x3c, 0x0, 0x1c, 0x0, 0xf, 0x0, 0x3, 0x80,
    0x0, 0xc0, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0
};

void rotation_draw(int w, int h, int angle) {
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            switch (angle) {
                case 90:
                    draw_[i][j] = draw[w - j - 1][i];
                    break;
                case 180:
                    draw_[w - j - 1][h - i - 1] = draw[j][i];
                    break;
                case 270:
                    draw_[i][j] = draw[j][h - i - 1];
                    break;
                default:
                    draw_[i][j] = draw[i][j];
            }
        }
    }
    memcpy(draw, draw_, sizeof(draw_));
}

void flip_draw(int w, int h, int d) {
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            if (d == 1) {
                draw_[j][i] = draw[j][h - i - 1];
            }
            else {
                draw_[j][i] = draw[w - j - 1][i];
            }
        }
    }
    memcpy(draw, draw_, sizeof(draw_));
}

void format_font(int w, int h) {
    int w_ = 8 * (w / 8 + (w % 8 != 0 ? 1 : 0));
    int h_ = 8 * (h / 8 + (h % 8 != 0 ? 1 : 0));
    std::cout << w_ << "," << h_ << std::endl;
}

unsigned char font3[11][96] = {0};

unsigned char font4[110] = {0};

void bin2hex(int w, int h, int index) {
    format_font(w, h);
    int w_ = 8 * (w / 8 + (w % 8 != 0 ? 1 : 0));
    int h_ = 8 * (h / 8 + (h % 8 != 0 ? 1 : 0));
    int a = 0;
    for (int i = 0; i < h_; i++) {
        for (int j = 0; j < w_; j++) {
            font3[index][a / 8] |= draw[j][i] << (7 - (a % 8));
            a++;
        }
    }
    std::cout << a << std::endl;
}

void draw_font(int w, int h) {
    int w_ = 0, h_ = 0;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 87; j++) {
            for (int k = 0; k < 8; k++) {
                draw[w_][h_] = (font2[i][j] >> (7 - k)) & 1;
                std::cout << draw[w_][h_];
                w_++;
                if (w_ >= w) {
                    w_ = 0;
                    std::cout << std::endl;
                    h_++;
                }
            }
        }
        std::cout << std::endl << std::endl << std::endl;
        rotation_draw(w, h, 270);
        flip_draw(h, w, 0);
        bin2hex(h, w, i);
        w_ = 0, h_ = 0;
        for (int i = 0; i < w; i++) {
            std::cout << std::endl;
            for (int j = 0; j <= h; j++) {
                std::cout << draw[j][i];
            }
        }
        w_ = 0, h_ = 0;
        std::cout << std::endl << std::endl << std::endl;
    }
}



void format_font_size(int *w, int *h) {
    *w = 8 * (*w / 8 + (*w % 8 != 0 ? 1 : 0));
    *h = 8 * (*h / 8 + (*h % 8 != 0 ? 1 : 0));
}
//
// int main() {
//     draw_font(24, 29);
//     for (int i = 0; i < 10; i++) {
//         std::cout << "{";
//         for (int j = 0; j < 96; j++) {
//             // std::cout << std::hex << (int)font3[i][j] << " ";
//             font3[i][j] = ~font3[i][j];
//             printf("0x%02X,", font3[i][j]);
//         }
//         std::cout << "},\n";
//     }
//
//     unsigned char aa[] = "你";
//     unsigned char bb[] = "好";
//     unsigned char cc[] = "a";
//
//     string str = "hello world,你好世界";
//
//     for (auto i : str) {
//         cout << (int)i << endl;
//     }
//
//     map<uint8_t *, int> font_map;
//
//     font_map.insert(make_pair(aa, 0));
//     font_map.insert(make_pair(bb, 1));
//     font_map.insert(make_pair(cc, 2));
//
//     cout << font_map[bb] << endl;
//
//     int d = 30, b = 22;
//     format_font_size(&d, &b);
//     cout << d << "," << b << endl;
//
//     return 0;
// }
// TIP See CLion help at <a
// href="https://www.jetbrains.com/help/clion/">jetbrains.com/help/clion/</a>.
//  Also, you can try interactive lessons for CLion by selecting
//  'Help | Learn IDE Features' from the main menu.